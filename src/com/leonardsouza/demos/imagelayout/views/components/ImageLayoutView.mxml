<s:Group 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	width="800" height="800" 
	creationComplete="creationCompleteHandler(event)" 
	resize="resizeHandler(event)"
	xmlns:components="com.leonardsouza.demos.imagelayout.views.components.*" 
	xmlns:layouts="com.leonardsouza.display.layouts.*">
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
		
	<fx:Script>
		<![CDATA[
			import com.gskinner.motion.easing.Back;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import spark.effects.Rotate3D;
			
			private var _dataProvider:ArrayCollection;
			private var _imageSource:String;
			
			public function get imageSource():String
			{
				return _imageSource;
			}

			[Bindable] 
			public function set imageSource(v:String):void
			{
				_imageSource = v;
			}


			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}
			
			[Bindable]
			public function set dataProvider(v:ArrayCollection):void
			{
				_dataProvider = v;
			}
			
			public function setThumbScrollPosition(position:int):void
			{
				this.dgThumbnails.horizontalScrollPosition = position;
			}

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				dgContainer.transform.perspectiveProjection = new PerspectiveProjection();
				dgContainer.transform.perspectiveProjection.fieldOfView = 50;
				//dgContainer.transform.perspectiveProjection.focalLength = 10;
				resizeHandler();
			}


			protected function resizeHandler(event:ResizeEvent = null):void
			{
				if (dgContainer.transform.perspectiveProjection)
				{
					dgContainer.transform.perspectiveProjection.projectionCenter = new Point( width/2, height/2 );
				}
			}

		]]>
	</fx:Script>

	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="#333333" />
		</s:fill>
	</s:Rect>

	<s:Rect
		width="120%"
		height="120%"
		blendMode="screen"
		verticalCenter="0"
		horizontalCenter="0"
		alpha=".1">
		<s:fill>
			<s:RadialGradient>
				<s:GradientEntry color="0xFFFFFF" ratio="0"/>
				<s:GradientEntry color="0x000000" ratio="1"/>
			</s:RadialGradient>
		</s:fill>
	</s:Rect>
	
	<s:Group
		id="dgContainer"
		transformX="{dgContainer.width/2}"
		transformY="{dgContainer.height/2}"
		verticalCenter="0"
		horizontalCenter="0"
		z="40">
		
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="#FFFFFF" alpha="0"/>
			</s:fill>
		</s:Rect>

		<s:DataGroup 
			id="dgThumbnails"
			dataProvider="{this.dataProvider}"
			width="400"
			height="400">
			<s:layout>
				<layouts:ImageLayout
					animate="true"
					animationDuration="1"
					animationEase="Back.easeInOut"
					animationStrength="800"
					depthFactor="-15"
					gridInterval="35"
					contrastThreshold="40"
					id="imageLayout"/>
			</s:layout>
		</s:DataGroup>	
		
	</s:Group>
	
</s:Group>
